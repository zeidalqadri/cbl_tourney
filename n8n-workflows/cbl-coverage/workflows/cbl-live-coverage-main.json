{
  "name": "CBL Live Match Coverage Automation",
  "nodes": [
    {
      "parameters": {
        "path": "/cbl/venue-checkin",
        "options": {
          "noResponseBody": false,
          "responseMode": "onReceived",
          "responseData": "={{ { \"status\": \"received\", \"message\": \"Check-in processed\" } }}"
        }
      },
      "id": "e3c8b5d1-2a4f-4b6d-8e9a-1f2c3d4e5f6a",
      "name": "Slack Check-in Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "cbl-slack-checkin"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "triggerAtMinute": 5
            }
          ]
        }
      },
      "id": "a1b2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "5-Min Polling Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "operation": "read",
        "table": "venue_status",
        "filterByFormula": "AND({status_changed} = TRUE(), {processed} = FALSE())",
        "maxRecords": 50,
        "options": {
          "fields": [
            "id",
            "venue",
            "status",
            "content_type",
            "last_updated",
            "processed"
          ]
        }
      },
      "id": "b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e",
      "name": "Check Airtable Status",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [450, 500],
      "credentials": {
        "airtableApi": {
          "id": "airtable-cbl",
          "name": "CBL Airtable"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Slack message for venue and content type\nconst input = $input.item.json;\nconst message = input.text || input.message || '';\n\n// Venue mapping\nconst venuePatterns = {\n  'yu hwa': 'Yu Hwa',\n  'malim': 'Malim',\n  'kuala nerang': 'Kuala Nerang',\n  'gemencheh': 'Gemencheh'\n};\n\n// Find venue\nlet venue = null;\nfor (const [pattern, name] of Object.entries(venuePatterns)) {\n  if (message.toLowerCase().includes(pattern)) {\n    venue = name;\n    break;\n  }\n}\n\n// Determine content type\nconst contentType = message.toLowerCase().includes('video') ? 'video' : \n                   message.toLowerCase().includes('photo') || \n                   message.toLowerCase().includes('gallery') ? 'photos' : null;\n\nif (!venue || !contentType) {\n  throw new Error(`Invalid check-in format. Message: ${message}`);\n}\n\nreturn {\n  venue: venue,\n  contentType: contentType,\n  timestamp: new Date().toISOString(),\n  source: 'slack',\n  originalMessage: message,\n  user: input.user_name || 'unknown'\n};"
      },
      "id": "c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f",
      "name": "Parse Check-in Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "venue_status",
        "filterBy": "formula",
        "filterByFormula": "={venue}='{{ $json.venue }}'",
        "fields": {
          "status": "={{ $json.contentType === 'video' ? 'Video Ready' : 'Photos Uploaded' }}",
          "content_type": "={{ $json.contentType }}",
          "last_updated": "={{ $json.timestamp }}",
          "updated_by": "={{ $json.source }}-{{ $json.user }}",
          "status_changed": true,
          "processed": false
        }
      },
      "id": "d4e5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a",
      "name": "Update Venue Status",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [650, 300],
      "credentials": {
        "airtableApi": {
          "id": "airtable-cbl",
          "name": "CBL Airtable"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.contentType || $json.content_type }}",
              "operation": "equals",
              "value2": "video"
            }
          ]
        }
      },
      "id": "e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b",
      "name": "Check Content Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "jsCode": "// Check cache first\nconst venue = $json.venue;\nconst cacheKey = `youtube_${venue}_${new Date().toDateString()}`;\nconst cachedData = $getWorkflowStaticData(cacheKey);\n\nif (cachedData && cachedData.expires > Date.now()) {\n  return {\n    ...cachedData.data,\n    fromCache: true\n  };\n}\n\n// Return data for API call\nreturn {\n  venue: venue,\n  needsApiCall: true,\n  cacheKey: cacheKey\n};"
      },
      "id": "f6a7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c",
      "name": "YouTube Cache Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsApiCall }}",
              "operation": "true"
            }
          ]
        }
      },
      "id": "a7b8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
      "name": "Need API Call?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/search",
        "authentication": "predefinedCredentialType",
        "requestMethod": "GET",
        "queryParametersUi": {
          "parameter": [
            {
              "name": "part",
              "value": "snippet"
            },
            {
              "name": "channelId",
              "value": "{{ $env.YOUTUBE_CHANNEL_ID }}"
            },
            {
              "name": "q",
              "value": "{{ $json.venue }} match CBL"
            },
            {
              "name": "type",
              "value": "video"
            },
            {
              "name": "eventType",
              "value": "live"
            },
            {
              "name": "maxResults",
              "value": "3"
            },
            {
              "name": "key",
              "value": "={{ $env.YOUTUBE_API_KEY }}"
            }
          ]
        },
        "options": {
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          },
          "timeout": 10000
        }
      },
      "id": "b8c9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e",
      "name": "Check YouTube Live",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1450, 250],
      "credentials": {
        "googleApi": {
          "id": "youtube-api",
          "name": "YouTube API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process and cache YouTube response\nconst items = $json.items || [];\nconst venue = $json.venue;\nconst cacheKey = $json.cacheKey;\n\nlet result;\n\nif (items.length === 0) {\n  // Check for recent videos if no live stream\n  result = {\n    status: 'no_live_stream',\n    venue: venue,\n    message: 'No live stream found, checking recent videos',\n    fallbackToRecent: true\n  };\n} else {\n  const video = items[0];\n  result = {\n    venue: venue,\n    videoId: video.id.videoId,\n    title: video.snippet.title,\n    embedUrl: `https://www.youtube.com/embed/${video.id.videoId}?autoplay=1`,\n    watchUrl: `https://www.youtube.com/watch?v=${video.id.videoId}`,\n    thumbnail: video.snippet.thumbnails.high.url,\n    isLive: true,\n    channelTitle: video.snippet.channelTitle,\n    publishedAt: video.snippet.publishedAt,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Cache the result for 5 minutes\nif (cacheKey && !result.fallbackToRecent) {\n  $setWorkflowStaticData(cacheKey, {\n    data: result,\n    expires: Date.now() + 300000 // 5 minutes\n  });\n}\n\nreturn result;"
      },
      "id": "c9d0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f",
      "name": "Process YouTube Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1650, 250]
    },
    {
      "parameters": {
        "operation": "search",
        "searchQuery": "mimeType contains 'image/' and trashed = false and '{{ $json.venue }}' in parents",
        "returnAll": false,
        "limit": 50,
        "fields": "files(id,name,mimeType,thumbnailLink,webViewLink,createdTime,size)",
        "options": {
          "orderBy": "createdTime desc"
        }
      },
      "id": "d0e1f2a3-4b5c-6d7e-8f9a0b1c2d3e4f5a",
      "name": "Check Google Drive Photos",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1050, 450],
      "credentials": {
        "googleApi": {
          "id": "gdrive-api",
          "name": "Google Drive API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate photo gallery with optimization\nconst files = $json.files || [];\nconst venue = $json.venue;\n\nif (files.length === 0) {\n  return {\n    status: 'no_content',\n    venue: venue,\n    message: 'No photos found',\n    contentType: 'photos'\n  };\n}\n\n// Process photos efficiently\nconst photos = files\n  .filter(file => file.mimeType.startsWith('image/'))\n  .slice(0, 20) // Limit to 20 photos\n  .map((photo, index) => ({\n    id: photo.id,\n    name: photo.name,\n    thumbnail: photo.thumbnailLink?.replace('=s220', '=s400'), // Larger thumbnails\n    fullSize: photo.webViewLink,\n    order: index,\n    size: photo.size\n  }));\n\n// Generate gallery data\nconst galleryId = `${venue.toLowerCase().replace(/\\s+/g, '-')}-${Date.now()}`;\nconst galleryData = {\n  venue: venue,\n  galleryId: galleryId,\n  totalPhotos: files.length,\n  displayPhotos: photos.length,\n  photos: photos,\n  galleryUrl: `https://cbl.com/gallery/${galleryId}`,\n  shareUrl: `https://cbl.com/share/gallery/${galleryId}`,\n  contentType: 'photos',\n  createdAt: new Date().toISOString(),\n  metadata: {\n    venue: venue,\n    matchDate: new Date().toDateString(),\n    photographer: $json.updated_by || 'CBL Media Team'\n  }\n};\n\nreturn galleryData;"
      },
      "id": "e1f2a3b4-5c6d-7e8f-9a0b1c2d3e4f5a6b",
      "name": "Create Photo Gallery",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1250, 450]
    },
    {
      "parameters": {},
      "id": "f2a3b4c5-6d7e-8f9a-0b1c2d3e4f5a6b7c",
      "name": "Merge Content Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1850, 350]
    },
    {
      "parameters": {
        "jsCode": "// Prepare WordPress update payload\nconst input = $input.item.json;\nconst isVideo = input.videoId ? true : false;\nconst hasContent = input.status !== 'no_content' && input.status !== 'no_stream';\n\nconst payload = {\n  venue: input.venue,\n  content_type: isVideo ? 'video' : 'gallery',\n  has_content: hasContent,\n  content_data: {\n    // Video data\n    video_id: input.videoId || null,\n    video_embed: input.embedUrl || null,\n    video_url: input.watchUrl || null,\n    video_title: input.title || null,\n    is_live: input.isLive || false,\n    \n    // Gallery data\n    gallery_id: input.galleryId || null,\n    gallery_url: input.galleryUrl || null,\n    share_url: input.shareUrl || null,\n    photo_count: input.totalPhotos || 0,\n    photos: input.photos || [],\n    \n    // Common data\n    thumbnail: input.thumbnail || (input.photos && input.photos[0]?.thumbnail) || null,\n    status: hasContent ? 'active' : 'coming_soon',\n    last_updated: new Date().toISOString()\n  },\n  meta: {\n    workflow_run: new Date().toISOString(),\n    source: input.source || 'scheduled',\n    cached: input.fromCache || false\n  }\n};\n\nreturn payload;"
      },
      "id": "a3b4c5d6-7e8f-9a0b-1c2d3e4f5a6b7c8d",
      "name": "Prepare WordPress Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2050, 350]
    },
    {
      "parameters": {
        "url": "={{ $env.WORDPRESS_API_URL }}/wp-json/cbl/v1/match-coverage",
        "authentication": "predefinedCredentialType",
        "requestMethod": "POST",
        "jsonParameters": true,
        "options": {
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 1000
          }
        },
        "bodyParametersJson": "={{ JSON.stringify($json) }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-CBL-Source",
              "value": "n8n-workflow"
            }
          ]
        }
      },
      "id": "b4c5d6e7-8f9a-0b1c-2d3e4f5a6b7c8d9e",
      "name": "Update WordPress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2250, 350],
      "credentials": {
        "httpBasicAuth": {
          "id": "wordpress-api",
          "name": "WordPress API"
        }
      }
    },
    {
      "parameters": {
        "channel": "={{ $env.SLACK_COVERAGE_CHANNEL }}",
        "text": ":white_check_mark: Match coverage updated!",
        "blocksUi": {
          "blocksValues": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Match Coverage Update*\n:stadium: *Venue:* {{ $json.venue }}\n:camera: *Type:* {{ $json.content_type }}\n:signal_strength: *Status:* {{ $json.content_data.status }}\n:clock1: *Time:* {{ new Date().toLocaleString() }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "{{ $json.content_type === 'video' ? ':tv: *Video:* ' + $json.content_data.video_title + '\\n:link: ' + $json.content_data.video_url : ':frame_with_picture: *Photos:* ' + $json.content_data.photo_count + ' images\\n:link: ' + $json.content_data.gallery_url }}"
              }
            }
          ]
        }
      },
      "id": "c5d6e7f8-9a0b-1c2d-3e4f5a6b7c8d9e0f",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [2450, 300],
      "credentials": {
        "slackApi": {
          "id": "slack-cbl",
          "name": "CBL Slack"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $env.SENTRY_DSN }}/api/0/projects/{{ $env.SENTRY_PROJECT }}/events/",
        "authentication": "predefinedCredentialType",
        "requestMethod": "POST",
        "jsonParameters": true,
        "bodyParametersJson": "{\n  \"level\": \"error\",\n  \"logger\": \"n8n.cbl.coverage\",\n  \"platform\": \"javascript\",\n  \"message\": \"CBL Coverage Workflow Error\",\n  \"environment\": \"{{ $env.NODE_ENV || 'production' }}\",\n  \"tags\": {\n    \"workflow\": \"cbl-coverage\",\n    \"venue\": \"{{ $json.venue }}\",\n    \"node\": \"{{ $node.name }}\"\n  },\n  \"extra\": {\n    \"error_message\": \"{{ $json.error?.message || $json.message }}\",\n    \"error_stack\": \"{{ $json.error?.stack }}\",\n    \"input_data\": \"{{ JSON.stringify($input.item.json) }}\",\n    \"timestamp\": \"{{ new Date().toISOString() }}\"\n  }\n}",
        "options": {
          "timeout": 5000
        }
      },
      "id": "d6e7f8a9-0b1c-2d3e-4f5a6b7c8d9e0f1a",
      "name": "Log to Sentry",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2250, 550],
      "credentials": {
        "httpHeaderAuth": {
          "id": "sentry-api",
          "name": "Sentry API"
        }
      }
    },
    {
      "parameters": {
        "channel": "={{ $env.SLACK_ERROR_CHANNEL }}",
        "text": ":x: Coverage update failed!",
        "blocksUi": {
          "blocksValues": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*:warning: Workflow Error*\n:x: *Error:* {{ $json.error?.message || 'Unknown error' }}\n:stadium: *Venue:* {{ $json.venue || 'N/A' }}\n:gear: *Node:* {{ $node.name }}\n:clock1: *Time:* {{ new Date().toLocaleString() }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Debug Info:*\n```{{ JSON.stringify($json, null, 2).slice(0, 500) }}```"
              }
            }
          ]
        }
      },
      "id": "e7f8a9b0-1c2d-3e4f-5a6b7c8d9e0f1a2b",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [2450, 550],
      "credentials": {
        "slackApi": {
          "id": "slack-cbl",
          "name": "CBL Slack"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "venue_status",
        "id": "={{ $json.id }}",
        "updateAllFields": false,
        "fields": {
          "processed": true,
          "processed_at": "={{ new Date().toISOString() }}",
          "workflow_run_id": "={{ $execution.id }}"
        }
      },
      "id": "f8a9b0c1-2d3e-4f5a-6b7c8d9e0f1a2b3c",
      "name": "Mark as Processed",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [2450, 400],
      "credentials": {
        "airtableApi": {
          "id": "airtable-cbl",
          "name": "CBL Airtable"
        }
      }
    }
  ],
  "connections": {
    "Slack Check-in Webhook": {
      "main": [
        [
          {
            "node": "Parse Check-in Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Check-in Data": {
      "main": [
        [
          {
            "node": "Update Venue Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Venue Status": {
      "main": [
        [
          {
            "node": "Check Content Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5-Min Polling Schedule": {
      "main": [
        [
          {
            "node": "Check Airtable Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Airtable Status": {
      "main": [
        [
          {
            "node": "Check Content Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Content Type": {
      "main": [
        [
          {
            "node": "YouTube Cache Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Google Drive Photos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Cache Check": {
      "main": [
        [
          {
            "node": "Need API Call?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need API Call?": {
      "main": [
        [
          {
            "node": "Check YouTube Live",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Content Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check YouTube Live": {
      "main": [
        [
          {
            "node": "Process YouTube Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process YouTube Data": {
      "main": [
        [
          {
            "node": "Merge Content Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Google Drive Photos": {
      "main": [
        [
          {
            "node": "Create Photo Gallery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Photo Gallery": {
      "main": [
        [
          {
            "node": "Merge Content Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Content Data": {
      "main": [
        [
          {
            "node": "Prepare WordPress Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare WordPress Payload": {
      "main": [
        [
          {
            "node": "Update WordPress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update WordPress": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mark as Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "cbl-error-handler"
  },
  "staticData": null,
  "tags": [
    {
      "name": "production"
    },
    {
      "name": "cbl-coverage"
    },
    {
      "name": "live-updates"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-01-15T00:00:00.000Z",
  "versionId": "v1.0.0"
}